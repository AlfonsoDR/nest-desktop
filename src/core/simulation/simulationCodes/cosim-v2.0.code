import numpy

def configure_nest(nest, addresses):
  nest.ResetKernel()
  {{ #simulation.code.runSimulationInsite }}

  try:
    nest.Install('insitemodule')
  except:
    pass
  {{ /simulation.code.runSimulationInsite }}

  # Set simulation kernel
  nest.SetKernelStatus({
    # "data_path": "{{ simulation.kernel.dataPath }}",
    "local_num_threads": {{ simulation.kernel.localNumThreads }},
    "resolution": {{ simulation.kernel.resolution }},
    "rng_seed": {{ simulation.kernel.rngSeed }},
  })
  {{ #network.hasNodeModels }}

  # Copy node models
  {{ #network.nodeModels }}
  nest.CopyModel("{{ existingModelId }}", "{{ newModelId }}"{{ #hasSomeVisibleParams }}, params={
  {{ #filteredParams }}
    "{{ id }}": {{ code }},
  {{ /filteredParams }}
  }{{ /hasSomeVisibleParams }})
  {{ /network.nodeModels }}
  {{ /network.hasNodeModels }}

  # Create nodes
  {{ #network.nodes }}
  {{ view.label }} = nest.Create("{{ modelId }}", {{ n }}{{ #hasSomeVisibleParams }}, params={
  {{ #filteredParams }}
    "{{ id }}": {{ code }},
  {{ /filteredParams }}
  {{ #model.isRecorder }}
  {{ #model.isMultimeter }}
    "record_from": {{ &recordsFixed }},
  {{ /model.isMultimeter }}
  {{ #simulation.code.runSimulationInsite }}
    "record_to": "insite",
  {{ /simulation.code.runSimulationInsite }}
  {{ /model.isRecorder }}
  }{{ /hasSomeVisibleParams }}{{ #spatial.positions }}, positions={{ &spatial.code }}{{ /spatial.positions }})
  {{ /network.nodes }}
  {{ #network.hasSomeNodeCompartments }}

  # Create node compartments
  {{ #network.nodes }}
  {{ #hasCompartments }}
  {{ view.label }}.compartments = [
  {{ #compartments }}
    {"parent_idx": {{ parentIdx }}{{ #hasSomeParams }}, "params": {
      {{ #filteredParams }}"{{ id }}": {{ code }},
      {{ /filteredParams }}}
    {{ /hasSomeParams }}},
  {{ /compartments }}
  ]
  {{ /hasCompartments }}
  {{ /network.nodes }}
  {{ /network.hasSomeNodeCompartments }}
  {{ #network.hasSomeNodeReceptors }}

  # Create node receptors
  {{ #network.nodes }}
  {{ #hasReceptors }}
  {{ view.label }}.receptors = [
  {{ #receptors }}
    {"comp_idx": {{ compartment.idx }}, "receptor_type": "{{ id }}"{{ #hasSomeParams }}, "params": {
      {{ #filteredParams }}"{{ id }}": {{ code }},
      {{ /filteredParams }}}
    {{ /hasSomeParams }}},
  {{ /receptors }}
  ]
  {{ /hasReceptors }}
  {{ /network.nodes }}
  {{ /network.hasSomeNodeReceptors }}
  {{ #network.hasSynapseModels }}

  # Copy synapse models
  {{ #network.synapseModels }}
  nest.CopyModel("{{ existingModelId }}", "{{ newModelId }}"{{ #hasSomeVisibleParams }}, params={
  {{ #filteredParams }}
    "{{ id }}": {{ code }},
  {{ /filteredParams }}
  }{{ /hasSomeVisibleParams }})
  {{ /network.synapseModels }}
  {{ /network.hasSynapseModels }}

  # Connect nodes
  {{ #network.connections }}
  nest.Connect({{ source.view.label }}{{ sourceSlice.indices }}, {{ target.view.label }}{{ targetSlice.indices }}{{ #hasConnSpec }}{{ ^hasSomeVisibleParams }}, "{{ rule.value }}"{{ /hasSomeVisibleParams }}{{ #hasSomeVisibleParams }}, conn_spec={
    "rule": "{{ rule.value }}",
  {{ #filteredParams }}
    "{{ id }}": {{ code }},
  {{ /filteredParams }}
  }{{ /hasSomeVisibleParams }}{{ /hasConnSpec }}{{ #synapse.hasSynSpec }}, syn_spec={{ ^synapse.hasSomeVisibleParams }}"{{ synapse.modelId }}"{{ /synapse.hasSomeVisibleParams }}{{ #synapse.hasSomeVisibleParams }}{ {{ ^synapse.isStatic }}
    "synapse_model": "{{ synapse.modelId }}",{{ /synapse.isStatic }}
  {{ #synapse.filteredParams }}
    "{{ id }}": {{ code }},
  {{ /synapse.filteredParams }}
  {{ #synapse.hasReceptorIndices }}
    "receptor_type": {{ synapse.receptorIdx }},
  {{ /synapse.hasReceptorIndices }}
  }{{ /synapse.hasSomeVisibleParams }}{{ /synapse.hasSynSpec }})
  {{ /network.connections }}

  # Configurations for Co-Simulation:
  # - input neurons recieve spikes from other simulator
  # - output neurons send spikes to other simulator

  input_stimulator = nest.Create("spike_generator", params={
    "label": addresses['stimulus_source'],
    "stimulus_source": "mpi",
  })
  nest.Connect(input_stimulator, {{ network.state.nodeInput }})

  output_recorder = nest.Create("spike_recorder", params={
    "label": addresses['record_to'],
    "record_to": "mpi",
  })
  nest.Connect({{ network.state.nodeOutput }}, output_recorder)

  # Prepare simulation
  nest.Prepare()

  return input_stimulator, output_recorder

