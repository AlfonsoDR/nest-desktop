stages:
  - build
  - deploy

#
# BUILD APP
#

build_app:
  stage: build
  image: node:16-alpine
  artifacts:
    paths:
      - .env
      - nest_desktop
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: always
  before_script:
    - touch .env
    - |-
      if [[ $CI_COMMIT_BRANCH == "main" ]]; then
        VERSION="$(node -p "require('./package.json').version")"
        echo "__version__ = '${VERSION}'" >> nest_desktop/__init__.py
        echo "DOCKER_TAG='${VERSION}'" >> .env
      else
        VERSION="$(node -p "var sem = {alpha: 'a', beta: 'b', dev: 'dev', rc: 'rc'}; var v = require('./package.json').version.split('-'); [v[0], sem[v[1]]].join('')")"
        echo "__version__ = '${VERSION}${CI_PIPELINE_IID}'" >> nest_desktop/__init__.py
        echo "DOCKER_TAG='${VERSION}${CI_PIPELINE_IID}'" >> .env
      fi
    - yarn install
  script:
    - yarn build
    - cat nest_desktop/__init__.py
    - cat .env
  tags:
    - docker-runner
    - read-only

#
# BUILD ELECTRON
#

build_electron:
  stage: build
  image: electronuserland/builder:wine
  artifacts:
    paths:
      - dist_electron
    expire_in: 1 day
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: always
  before_script:
    - VERSION="$(node -p "require('./package.json').version")"
    - |-
      if [[ $CI_COMMIT_BRANCH == "main" ]]; then
        echo "__version__ = '${VERSION}'" >> nest_desktop/__init__.py
      else
        echo "__version__ = '${VERSION}${CI_PIPELINE_IID}'" >> nest_desktop/__init__.py
      fi
    - yarn
  script:
    - yarn electron:build
    - cat nest_desktop/__init__.py
  tags:
    - docker-runner
    - read-only

#
# DEPLOY PYTHON PACKAGE
#

deploy_pypi:
  stage: deploy
  image: python:latest
  needs:
    - build_app
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: manual
  before_script:
    - python setup.py sdist bdist_wheel
    - pip install twine
  script:
    - |-
      if [[ $CI_COMMIT_BRANCH != "main" ]]; then
        TWINE_PASSWORD=${TESTPYPI_ACCESS_TOKEN} TWINE_USERNAME=__token__ python -m twine upload --repository testpypi dist/*
      else
        TWINE_PASSWORD=${PYPI_ACCESS_TOKEN} TWINE_USERNAME=__token__ python -m twine upload dist/*
      fi
  tags:
    - docker-runner
    - read-only

#
# DEPLOY DOCKER IMAGE ON EBRAINS
#

deploy_docker_ebrains:
  stage: deploy
  image: ubuntu:22.04
  needs:
    - build_app
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: manual
  before_script:
    - source .env
    - echo "${EBRAINS_DOCKER_REGISTRY_TOKEN}" | docker login -u ${EBRAINS_DOCKER_REGISTRY_USER} --password-stdin docker-registry.ebrains.eu
  script:
    - docker build -f docker/Dockerfile -t docker-registry.ebrains.eu/nest/nest-desktop:${DOCKER_TAG} .
    - |-
      if [[ $CI_COMMIT_BRANCH == "main" ]]; then
        docker tag docker-registry.ebrains.eu/nest/nest-desktop:${DOCKER_TAG} docker-registry.ebrains.eu/nest/nest-desktop:${DOCKER_TAG%.*}
        docker tag docker-registry.ebrains.eu/nest/nest-desktop:${DOCKER_TAG} docker-registry.ebrains.eu/nest/nest-desktop:latest
      else
        docker tag docker-registry.ebrains.eu/nest/nest-desktop:${DOCKER_TAG} docker-registry.ebrains.eu/nest/nest-desktop:dev
      fi
    - docker push docker-registry.ebrains.eu/nest/nest-desktop --all-tags
  after_script:
    - docker logout docker-registry.ebrains.eu
  tags:
    - shell-runner
    - read-only

#
# DEPLOY DOCKER IMAGE ON DOCKER HUB in nestsim organisation
#

deploy_docker_hub_nestsim:
  stage: deploy
  image: ubuntu:22.04
  needs:
    - build_app
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: manual
  before_script:
    - source .env
    - echo "${DOCKER_HUB_ACCESS_TOKEN}" | docker login -u ${DOCKER_HUB_ACCESS_USER} --password-stdin
  script:
    - docker build -f docker/Dockerfile -t nestsim/nest-desktop:${DOCKER_TAG} .
    - |-
      if [[ $CI_COMMIT_BRANCH == "main" ]]; then
        docker tag nestsim/nest-desktop:${DOCKER_TAG} nestsim/nest-desktop:${DOCKER_TAG%.*}
        docker tag nestsim/nest-desktop:${DOCKER_TAG} nestsim/nest-desktop:latest
      else
        docker tag nestsim/nest-desktop:${DOCKER_TAG} nestsim/nest-desktop:dev
      fi
    - docker push nestsim/nest-desktop --all-tags
  after_script:
    - docker logout
  tags:
    - shell-runner
    - read-only

#
# DEPLOY DOCKER IMAGE ON DOCKER HUB in nestdesktop organisation
#

deploy_docker_hub_nestdesktop:
  stage: deploy
  image: ubuntu:22.04
  needs:
    - build_app
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: manual
  before_script:
    - source .env
    - echo "${DOCKER_HUB_ACCESS_TOKEN}" | docker login -u ${DOCKER_HUB_ACCESS_USER} --password-stdin
  script:
    - docker build -f docker/Dockerfile -t nestdesktop/app:${DOCKER_TAG} .
    - |-
      if [[ $CI_COMMIT_BRANCH == "main" ]]; then
        docker tag nestdesktop/app:${DOCKER_TAG} nestdesktop/app:${DOCKER_TAG%.*}
        docker tag nestdesktop/app:${DOCKER_TAG} nestdesktop/app:latest
      else
        docker tag nestdesktop/app:${DOCKER_TAG} nestdesktop/app:dev
      fi
    - docker push nestdesktop/app --all-tags
  after_script:
    - docker logout
  tags:
    - shell-runner
    - read-only

#
# DEPLOY SNAP ON SNAPCRAFT
#

deploy_snap:
  stage: deploy
  image: snapcore/snapcraft:latest
  needs:
    - build_electron
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: manual
  before_script:
    - echo "${SNAP_ACCESS_TOKEN}" | snapcraft login --with -
  script:
    - snapcraft upload --release="${SNAP_RELEASE}" dist_electron/nest-desktop*.snap
  after_script:
    - snapcraft logout
  tags:
    - docker-runner
    - read-only
