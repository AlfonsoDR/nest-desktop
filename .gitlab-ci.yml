stages:
  - build
  - deploy

#
# BUILD APP
#

build_app:
  stage: build
  image: node:16-alpine
  artifacts:
    paths:
      - nest_desktop
      - version.txt
  script:
    - VERSION=`node -p "require('./package.json').version"`
    - |-
      if [[ $CI_COMMIT_BRANCH != "main" ]]; then
        VERSION="${VERSION}${CI_PIPELINE_IID}"
      fi
    - echo "VERSION='${VERSION_DEV}'" >> version.txt
    - echo "__version__ = '${VERSION_DEV}'" >> nest_desktop/__init__.py
    - yarn
    - yarn build
  tags:
    - docker-runner

#
# BUILD ELECTRON
#

build_electron:
  stage: build
  image: electronuserland/builder:wine
  artifacts:
    paths:
      - dist_electron
      - version.txt
  script:
    - VERSION=`node -p "require('./package.json').version"`
    - |-
      if [[ $CI_COMMIT_BRANCH != "main" ]]; then
        VERSION="${VERSION}${CI_PIPELINE_IID}"
      fi
    - echo "__version__ = '${VERSION_DEV}'" >> nest_desktop/__init__.py
    - yarn
    - yarn electron:build
  tags:
    - docker-runner

#
# DEPLOY PYTHON PACKAGE
#

deploy_pypi:
  stage: deploy
  image: python:latest
  rules:
    - when: manual
  before_script:
    - python setup.py sdist bdist_wheel
    - pip install twine
  script:
    - |-
      if [[ $CI_COMMIT_BRANCH != "main" ]]; then
        TWINE_PASSWORD=${TESTPYPI_ACCESS_TOKEN} TWINE_USERNAME=__token__ python -m twine upload --repository testpypi dist/*
      else
        TWINE_PASSWORD=${PYPI_ACCESS_TOKEN} TWINE_USERNAME=__token__ python -m twine upload dist/*
      fi
  tags:
    - docker-runner

#
# DEPLOY DOCKER IMAGE ON EBRAINS
#

deploy_ebrains_docker:
  stage: deploy
  image: ubuntu:20.04
  needs:
    - build_app
  before_script:
    - source version.txt
    - echo "${EBRAINS_DOCKER_REGISTRY_TOKEN}" | docker login -u ${EBRAINS_DOCKER_REGISTRY_USER} --password-stdin docker-registry.ebrains.eu
  script:
    - docker build -f .gitlab-ci-docker/Dockerfile -t docker-registry.ebrains.eu/nest/nest-desktop:${VERSION} .
    - docker push docker-registry.ebrains.eu/nest/nest-desktop:${VERSION}
  after_script:
    - docker logout docker-registry.ebrains.eu
  tags:
    - shell-runner

#
# DEPLOY DOCKER IMAGE ON DOCKER HUB
#

deploy_docker_hub:
  stage: deploy
  image: ubuntu:20.04
  needs:
    - build_app
  before_script:
    - source version.txt
    - echo "${DOCKER_HUB_ACCESS_TOKEN}" | docker login -u ${DOCKER_HUB_ACCESS_USER} --password-stdin
  script:
    - docker build -f .gitlab-ci-docker/Dockerfile -t nestdesktop/app:${VERSION} .
    - docker push nestdesktop/app:${VERSION}
  after_script:
    - docker logout
  tags:
    - shell-runner

#
# DEPLOY SNAP ON SNAPCRAFT
#

deploy_snap:
  stage: deploy
  image: ubuntu:20.04
  needs:
    - build_electron
  rules:
    - when: manual
  before_script:
    - apt update && apt install -y snapcraft
    - echo "${SNAP_ACCESS_TOKEN}" | snapcraft login --with -
  script:
    - snapcraft upload --release="${SNAP_RELEASE}" dist_electron/nest-desktop*.snap
  after_script:
    - snapcraft logout
  tags:
    - shell-runner
